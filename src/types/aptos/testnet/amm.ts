/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

/* Generated modules for account 0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba */

import {
  TypeRegistry,
  AptosBindOptions,
  AptosBaseProcessor,
  TypedEventInstance,
  AptosNetwork,
  TypedEntryFunctionPayload,
  AptosContext,
  CallFilter,
} from "@sentio/sdk-aptos";
import { AptosFetchConfig } from "@sentio/protos";
import { Address, MoveModule } from "aptos-sdk/src/generated";

import * as _0x1 from "@sentio/sdk-aptos/lib/builtin/0x1";
import * as _0x92285e3fb7903c2b2fd17d96da946cbd76b927a1bad1649f465b698af5f76e87 from "./0x92285e3fb7903c2b2fd17d96da946cbd76b927a1bad1649f465b698af5f76e87";
import * as _0x66c2cd54520b51294f62392203ed87de0e7c47b3650f5ed0fbe1578835275b8c from "./0x66c2cd54520b51294f62392203ed87de0e7c47b3650f5ed0fbe1578835275b8c";
import * as _0x504b41d0fe4a9424ddc4ddd3517acbfc23f17805e2fb82d5caf8d9fcfeb28a02 from "./0x504b41d0fe4a9424ddc4ddd3517acbfc23f17805e2fb82d5caf8d9fcfeb28a02";

export namespace fees {
  export class FeesAccountCapability {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::fees::FeesAccountCapability";
    signer_cap: _0x1.account.SignerCapability;
  }

  export function loadTypes(_r: TypeRegistry) {
    loadAllTypes(_r);
  }
  export const ABI: MoveModule = JSON.parse(
    '{"address":"0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba","name":"fees","friends":["0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::init","0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::stable_pool","0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::weighted_pool"],"exposed_functions":[{"name":"absorb_fee","visibility":"friend","is_entry":false,"generic_type_params":[{"constraints":[]}],"params":["0x1::coin::Coin<T0>"],"return":[]},{"name":"initialize","visibility":"friend","is_entry":false,"generic_type_params":[],"params":["&signer"],"return":[]},{"name":"initialized","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["bool"]},{"name":"register_coin","visibility":"friend","is_entry":false,"generic_type_params":[{"constraints":[]}],"params":[],"return":[]},{"name":"withdraw_fee","visibility":"public","is_entry":false,"generic_type_params":[{"constraints":[]}],"params":["&signer","u64"],"return":["0x1::coin::Coin<T0>"]}],"structs":[{"name":"FeesAccountCapability","is_native":false,"abilities":["key"],"generic_type_params":[],"fields":[{"name":"signer_cap","type":"0x1::account::SignerCapability"}]}]}'
  );
}

export class init extends AptosBaseProcessor {
  constructor(options: AptosBindOptions) {
    super("init", options);
  }
  static DEFAULT_OPTIONS: AptosBindOptions = {
    address:
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba",
    network: AptosNetwork.TEST_NET,
  };

  static bind(options: Partial<AptosBindOptions> = {}): init {
    return new init({ ...init.DEFAULT_OPTIONS, ...options });
  }

  onEntryInitialize(
    func: (call: init.InitializePayload, ctx: AptosContext) => void,
    filter?: CallFilter,
    fetchConfig?: AptosFetchConfig
  ): init {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "init::initialize",
      },
      fetchConfig
    );
    return this;
  }

  loadTypesInternal(registry: TypeRegistry) {
    loadAllTypes(registry);
  }
}

export namespace init {
  export interface InitializePayload extends TypedEntryFunctionPayload<[]> {
    arguments_typed: [];
    type_arguments: [];
  }

  export function loadTypes(_r: TypeRegistry) {
    loadAllTypes(_r);
  }
  export const ABI: MoveModule = JSON.parse(
    '{"address":"0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba","name":"init","friends":[],"exposed_functions":[{"name":"initialize","visibility":"public","is_entry":true,"generic_type_params":[],"params":["&signer"],"return":[]}],"structs":[]}'
  );
}

export class manager extends AptosBaseProcessor {
  constructor(options: AptosBindOptions) {
    super("manager", options);
  }
  static DEFAULT_OPTIONS: AptosBindOptions = {
    address:
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba",
    network: AptosNetwork.TEST_NET,
  };

  static bind(options: Partial<AptosBindOptions> = {}): manager {
    return new manager({ ...manager.DEFAULT_OPTIONS, ...options });
  }

  onEntryChangeManagerAddress(
    func: (
      call: manager.ChangeManagerAddressPayload,
      ctx: AptosContext
    ) => void,
    filter?: CallFilter,
    fetchConfig?: AptosFetchConfig
  ): manager {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "manager::change_manager_address",
      },
      fetchConfig
    );
    return this;
  }

  loadTypesInternal(registry: TypeRegistry) {
    loadAllTypes(registry);
  }
}

export namespace manager {
  export class Manager {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::manager::Manager";
    manager_address: Address;
  }

  export class ManagerAccountCapability {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::manager::ManagerAccountCapability";
    signer_cap: _0x1.account.SignerCapability;
  }

  export interface ChangeManagerAddressPayload
    extends TypedEntryFunctionPayload<[Address]> {
    arguments_typed: [Address];
    type_arguments: [];
  }

  export function loadTypes(_r: TypeRegistry) {
    loadAllTypes(_r);
  }
  export const ABI: MoveModule = JSON.parse(
    '{"address":"0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba","name":"manager","friends":["0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::init"],"exposed_functions":[{"name":"change_manager_address","visibility":"public","is_entry":true,"generic_type_params":[],"params":["&signer","address"],"return":[]},{"name":"initialize","visibility":"friend","is_entry":false,"generic_type_params":[],"params":["&signer"],"return":[]},{"name":"initialized","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["bool"]},{"name":"is_manager","visibility":"public","is_entry":false,"generic_type_params":[],"params":["address"],"return":["bool"]}],"structs":[{"name":"Manager","is_native":false,"abilities":["key"],"generic_type_params":[],"fields":[{"name":"manager_address","type":"address"}]},{"name":"ManagerAccountCapability","is_native":false,"abilities":["key"],"generic_type_params":[],"fields":[{"name":"signer_cap","type":"0x1::account::SignerCapability"}]}]}'
  );
}

export class base_pool extends AptosBaseProcessor {
  constructor(options: AptosBindOptions) {
    super("base_pool", options);
  }
  static DEFAULT_OPTIONS: AptosBindOptions = {
    address:
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba",
    network: AptosNetwork.TEST_NET,
  };

  static bind(options: Partial<AptosBindOptions> = {}): base_pool {
    return new base_pool({ ...base_pool.DEFAULT_OPTIONS, ...options });
  }

  onEntryInitialize(
    func: (call: base_pool.InitializePayload, ctx: AptosContext) => void,
    filter?: CallFilter,
    fetchConfig?: AptosFetchConfig
  ): base_pool {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "base_pool::initialize",
      },
      fetchConfig
    );
    return this;
  }

  onEntrySetSwapFeeProtocolAllocationBps(
    func: (
      call: base_pool.SetSwapFeeProtocolAllocationBpsPayload,
      ctx: AptosContext
    ) => void,
    filter?: CallFilter,
    fetchConfig?: AptosFetchConfig
  ): base_pool {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "base_pool::set_swap_fee_protocol_allocation_bps",
      },
      fetchConfig
    );
    return this;
  }

  loadTypesInternal(registry: TypeRegistry) {
    loadAllTypes(registry);
  }
}

export namespace base_pool {
  export class BasePoolAccountCapability {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::base_pool::BasePoolAccountCapability";
    signer_cap: _0x1.account.SignerCapability;
  }

  export class BasePoolParams {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::base_pool::BasePoolParams";
    swap_fee_protocol_allocation_ratio: _0x92285e3fb7903c2b2fd17d96da946cbd76b927a1bad1649f465b698af5f76e87.fixed_point64.FixedPoint64;
  }

  export class Null {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::base_pool::Null";
    dummy_field: Boolean;
  }

  export interface InitializePayload extends TypedEntryFunctionPayload<[]> {
    arguments_typed: [];
    type_arguments: [];
  }

  export interface SetSwapFeeProtocolAllocationBpsPayload
    extends TypedEntryFunctionPayload<[bigint]> {
    arguments_typed: [bigint];
    type_arguments: [];
  }

  export function loadTypes(_r: TypeRegistry) {
    loadAllTypes(_r);
  }
  export const ABI: MoveModule = JSON.parse(
    '{"address":"0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba","name":"base_pool","friends":["0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::init","0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::stable_pool","0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::weighted_pool"],"exposed_functions":[{"name":"initialize","visibility":"public","is_entry":true,"generic_type_params":[],"params":["&signer"],"return":[]},{"name":"initialized","visibility":"friend","is_entry":false,"generic_type_params":[],"params":[],"return":["bool"]},{"name":"is_null","visibility":"public","is_entry":false,"generic_type_params":[{"constraints":[]}],"params":[],"return":["bool"]},{"name":"max_supported_decimals","visibility":"friend","is_entry":false,"generic_type_params":[],"params":[],"return":["u8"]},{"name":"set_swap_fee_protocol_allocation_bps","visibility":"public","is_entry":true,"generic_type_params":[],"params":["&signer","u64"],"return":[]},{"name":"swap_fee_protocol_allocation_ratio","visibility":"friend","is_entry":false,"generic_type_params":[],"params":[],"return":["0x92285e3fb7903c2b2fd17d96da946cbd76b927a1bad1649f465b698af5f76e87::fixed_point64::FixedPoint64"]},{"name":"validate_pool_assets","visibility":"friend","is_entry":false,"generic_type_params":[{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]}],"params":[],"return":["bool"]},{"name":"validate_swap_fee","visibility":"friend","is_entry":false,"generic_type_params":[],"params":["u64"],"return":["bool"]}],"structs":[{"name":"BasePoolAccountCapability","is_native":false,"abilities":["key"],"generic_type_params":[],"fields":[{"name":"signer_cap","type":"0x1::account::SignerCapability"}]},{"name":"BasePoolParams","is_native":false,"abilities":["key"],"generic_type_params":[],"fields":[{"name":"swap_fee_protocol_allocation_ratio","type":"0x92285e3fb7903c2b2fd17d96da946cbd76b927a1bad1649f465b698af5f76e87::fixed_point64::FixedPoint64"}]},{"name":"Null","is_native":false,"abilities":[],"generic_type_params":[],"fields":[{"name":"dummy_field","type":"bool"}]}]}'
  );
}

export class lp_account extends AptosBaseProcessor {
  constructor(options: AptosBindOptions) {
    super("lp_account", options);
  }
  static DEFAULT_OPTIONS: AptosBindOptions = {
    address:
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba",
    network: AptosNetwork.TEST_NET,
  };

  static bind(options: Partial<AptosBindOptions> = {}): lp_account {
    return new lp_account({ ...lp_account.DEFAULT_OPTIONS, ...options });
  }

  onEntryInitializeStablePoolAccount(
    func: (
      call: lp_account.InitializeStablePoolAccountPayload,
      ctx: AptosContext
    ) => void,
    filter?: CallFilter,
    fetchConfig?: AptosFetchConfig
  ): lp_account {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "lp_account::initialize_stable_pool_account",
      },
      fetchConfig
    );
    return this;
  }

  onEntryInitializeWeightedPoolAccount(
    func: (
      call: lp_account.InitializeWeightedPoolAccountPayload,
      ctx: AptosContext
    ) => void,
    filter?: CallFilter,
    fetchConfig?: AptosFetchConfig
  ): lp_account {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "lp_account::initialize_weighted_pool_account",
      },
      fetchConfig
    );
    return this;
  }

  loadTypesInternal(registry: TypeRegistry) {
    loadAllTypes(registry);
  }
}

export namespace lp_account {
  export class StablePoolCapabilityStorage {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::lp_account::StablePoolCapabilityStorage";
    signer_cap: _0x1.account.SignerCapability;
  }

  export class WeightedPoolCapabilityStorage {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::lp_account::WeightedPoolCapabilityStorage";
    signer_cap: _0x1.account.SignerCapability;
  }

  export interface InitializeStablePoolAccountPayload
    extends TypedEntryFunctionPayload<[string, string]> {
    arguments_typed: [string, string];
    type_arguments: [];
  }

  export interface InitializeWeightedPoolAccountPayload
    extends TypedEntryFunctionPayload<[string, string]> {
    arguments_typed: [string, string];
    type_arguments: [];
  }

  export function loadTypes(_r: TypeRegistry) {
    loadAllTypes(_r);
  }
  export const ABI: MoveModule = JSON.parse(
    '{"address":"0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba","name":"lp_account","friends":[],"exposed_functions":[{"name":"initialize_stable_pool_account","visibility":"public","is_entry":true,"generic_type_params":[],"params":["&signer","vector<u8>","vector<u8>"],"return":[]},{"name":"initialize_weighted_pool_account","visibility":"public","is_entry":true,"generic_type_params":[],"params":["&signer","vector<u8>","vector<u8>"],"return":[]},{"name":"retrieve_stable_pool_signer_cap","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&signer"],"return":["0x1::account::SignerCapability"]},{"name":"retrieve_weighted_pool_signer_cap","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&signer"],"return":["0x1::account::SignerCapability"]},{"name":"stable_pool_initialized","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["bool"]},{"name":"weighted_pool_initialized","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["bool"]}],"structs":[{"name":"StablePoolCapabilityStorage","is_native":false,"abilities":["key"],"generic_type_params":[],"fields":[{"name":"signer_cap","type":"0x1::account::SignerCapability"}]},{"name":"WeightedPoolCapabilityStorage","is_native":false,"abilities":["key"],"generic_type_params":[],"fields":[{"name":"signer_cap","type":"0x1::account::SignerCapability"}]}]}'
  );
}

export class test_coins extends AptosBaseProcessor {
  constructor(options: AptosBindOptions) {
    super("test_coins", options);
  }
  static DEFAULT_OPTIONS: AptosBindOptions = {
    address:
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba",
    network: AptosNetwork.TEST_NET,
  };

  static bind(options: Partial<AptosBindOptions> = {}): test_coins {
    return new test_coins({ ...test_coins.DEFAULT_OPTIONS, ...options });
  }

  onEntryInitializeCoin(
    func: (call: test_coins.InitializeCoinPayload, ctx: AptosContext) => void,
    filter?: CallFilter,
    fetchConfig?: AptosFetchConfig
  ): test_coins {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "test_coins::initialize_coin",
      },
      fetchConfig
    );
    return this;
  }

  onEntryMintCoin(
    func: (call: test_coins.MintCoinPayload, ctx: AptosContext) => void,
    filter?: CallFilter,
    fetchConfig?: AptosFetchConfig
  ): test_coins {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "test_coins::mint_coin",
      },
      fetchConfig
    );
    return this;
  }

  loadTypesInternal(registry: TypeRegistry) {
    loadAllTypes(registry);
  }
}

export namespace test_coins {
  export class Capabilities<T0> {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::test_coins::Capabilities";
    burn_capability: _0x1.coin.BurnCapability<T0>;
    freeze_capability: _0x1.coin.FreezeCapability<T0>;
    mint_capability: _0x1.coin.MintCapability<T0>;
  }

  export class FakeCoin_A {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::test_coins::FakeCoin_A";
    dummy_field: Boolean;
  }

  export class FakeCoin_B {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::test_coins::FakeCoin_B";
    dummy_field: Boolean;
  }

  export class FakeCoin_C {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::test_coins::FakeCoin_C";
    dummy_field: Boolean;
  }

  export interface InitializeCoinPayload<T0 = any>
    extends TypedEntryFunctionPayload<[string, number]> {
    arguments_typed: [string, number];
    type_arguments: [string];
  }

  export interface MintCoinPayload<T0 = any>
    extends TypedEntryFunctionPayload<[Address, bigint]> {
    arguments_typed: [Address, bigint];
    type_arguments: [string];
  }

  export function loadTypes(_r: TypeRegistry) {
    loadAllTypes(_r);
  }
  export const ABI: MoveModule = JSON.parse(
    '{"address":"0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba","name":"test_coins","friends":[],"exposed_functions":[{"name":"initialize_coin","visibility":"public","is_entry":true,"generic_type_params":[{"constraints":[]}],"params":["&signer","0x1::string::String","u8"],"return":[]},{"name":"mint_coin","visibility":"public","is_entry":true,"generic_type_params":[{"constraints":[]}],"params":["&signer","address","u64"],"return":[]}],"structs":[{"name":"Capabilities","is_native":false,"abilities":["key"],"generic_type_params":[{"constraints":[]}],"fields":[{"name":"burn_capability","type":"0x1::coin::BurnCapability<T0>"},{"name":"freeze_capability","type":"0x1::coin::FreezeCapability<T0>"},{"name":"mint_capability","type":"0x1::coin::MintCapability<T0>"}]},{"name":"FakeCoin_A","is_native":false,"abilities":[],"generic_type_params":[],"fields":[{"name":"dummy_field","type":"bool"}]},{"name":"FakeCoin_B","is_native":false,"abilities":[],"generic_type_params":[],"fields":[{"name":"dummy_field","type":"bool"}]},{"name":"FakeCoin_C","is_native":false,"abilities":[],"generic_type_params":[],"fields":[{"name":"dummy_field","type":"bool"}]}]}'
  );
}

export namespace coin_helper {
  export function loadTypes(_r: TypeRegistry) {
    loadAllTypes(_r);
  }
  export const ABI: MoveModule = JSON.parse(
    '{"address":"0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba","name":"coin_helper","friends":[],"exposed_functions":[{"name":"is_unique_and_sorted","visibility":"public","is_entry":false,"generic_type_params":[{"constraints":[]},{"constraints":[]}],"params":[],"return":["bool"]},{"name":"supply","visibility":"public","is_entry":false,"generic_type_params":[{"constraints":[]}],"params":[],"return":["u128"]}],"structs":[]}'
  );
}

export namespace stable_math {
  export function loadTypes(_r: TypeRegistry) {
    loadAllTypes(_r);
  }
  export const ABI: MoveModule = JSON.parse(
    '{"address":"0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba","name":"stable_math","friends":[],"exposed_functions":[{"name":"get_D","visibility":"public","is_entry":false,"generic_type_params":[],"params":["vector<u64>","u64"],"return":["u64"]},{"name":"get_Y","visibility":"public","is_entry":false,"generic_type_params":[],"params":["vector<u64>","u64","u64","u64","u64"],"return":["u64"]}],"structs":[]}'
  );
}

export class stable_pool extends AptosBaseProcessor {
  constructor(options: AptosBindOptions) {
    super("stable_pool", options);
  }
  static DEFAULT_OPTIONS: AptosBindOptions = {
    address:
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba",
    network: AptosNetwork.TEST_NET,
  };

  static bind(options: Partial<AptosBindOptions> = {}): stable_pool {
    return new stable_pool({ ...stable_pool.DEFAULT_OPTIONS, ...options });
  }

  onEntryInitialize(
    func: (call: stable_pool.InitializePayload, ctx: AptosContext) => void,
    filter?: CallFilter,
    fetchConfig?: AptosFetchConfig
  ): stable_pool {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "stable_pool::initialize",
      },
      fetchConfig
    );
    return this;
  }

  onEntrySetAmplicationFactor(
    func: (
      call: stable_pool.SetAmplicationFactorPayload,
      ctx: AptosContext
    ) => void,
    filter?: CallFilter,
    fetchConfig?: AptosFetchConfig
  ): stable_pool {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "stable_pool::set_amplication_factor",
      },
      fetchConfig
    );
    return this;
  }

  onEntrySetDefaultPoolSwapFeeBps(
    func: (
      call: stable_pool.SetDefaultPoolSwapFeeBpsPayload,
      ctx: AptosContext
    ) => void,
    filter?: CallFilter,
    fetchConfig?: AptosFetchConfig
  ): stable_pool {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "stable_pool::set_default_pool_swap_fee_bps",
      },
      fetchConfig
    );
    return this;
  }

  onEntrySetPoolSwapFeeBps(
    func: (
      call: stable_pool.SetPoolSwapFeeBpsPayload,
      ctx: AptosContext
    ) => void,
    filter?: CallFilter,
    fetchConfig?: AptosFetchConfig
  ): stable_pool {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "stable_pool::set_pool_swap_fee_bps",
      },
      fetchConfig
    );
    return this;
  }

  onEventStablePoolCreationEvent(
    func: (
      event: stable_pool.StablePoolCreationEventInstance,
      ctx: AptosContext
    ) => void,
    fetchConfig?: AptosFetchConfig
  ): stable_pool {
    this.onEvent(
      func,
      {
        type: "stable_pool::StablePoolCreationEvent",
      },
      fetchConfig
    );
    return this;
  }

  onEventAddLiquidityEvent(
    func: (
      event: stable_pool.AddLiquidityEventInstance,
      ctx: AptosContext
    ) => void,
    fetchConfig?: AptosFetchConfig
  ): stable_pool {
    this.onEvent(
      func,
      {
        type: "stable_pool::AddLiquidityEvent",
      },
      fetchConfig
    );
    return this;
  }

  onEventRemoveLiquidityEvent(
    func: (
      event: stable_pool.RemoveLiquidityEventInstance,
      ctx: AptosContext
    ) => void,
    fetchConfig?: AptosFetchConfig
  ): stable_pool {
    this.onEvent(
      func,
      {
        type: "stable_pool::RemoveLiquidityEvent",
      },
      fetchConfig
    );
    return this;
  }

  onEventSwapEvent(
    func: (event: stable_pool.SwapEventInstance, ctx: AptosContext) => void,
    fetchConfig?: AptosFetchConfig
  ): stable_pool {
    this.onEvent(
      func,
      {
        type: "stable_pool::SwapEvent",
      },
      fetchConfig
    );
    return this;
  }

  onEventStablePoolParamChangeEvent(
    func: (
      event: stable_pool.StablePoolParamChangeEventInstance,
      ctx: AptosContext
    ) => void,
    fetchConfig?: AptosFetchConfig
  ): stable_pool {
    this.onEvent(
      func,
      {
        type: "stable_pool::StablePoolParamChangeEvent",
      },
      fetchConfig
    );
    return this;
  }

  loadTypesInternal(registry: TypeRegistry) {
    loadAllTypes(registry);
  }
}

export namespace stable_pool {
  export class AddLiquidityEvent<T0, T1, T2, T3> {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::stable_pool::AddLiquidityEvent";
    amount_0: bigint;
    amount_1: bigint;
    amount_2: bigint;
    amount_3: bigint;
    minted_lp_coin_amount: bigint;
  }

  export interface AddLiquidityEventInstance
    extends TypedEventInstance<AddLiquidityEvent<any, any, any, any>> {
    data_typed: AddLiquidityEvent<any, any, any, any>;
    type_arguments: [string, string, string, string];
  }

  export class RemoveLiquidityEvent<T0, T1, T2, T3> {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::stable_pool::RemoveLiquidityEvent";
    amount_0: bigint;
    amount_1: bigint;
    amount_2: bigint;
    amount_3: bigint;
    burned_lp_coin_amount: bigint;
  }

  export interface RemoveLiquidityEventInstance
    extends TypedEventInstance<RemoveLiquidityEvent<any, any, any, any>> {
    data_typed: RemoveLiquidityEvent<any, any, any, any>;
    type_arguments: [string, string, string, string];
  }

  export class StablePool<T0, T1, T2, T3> {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::stable_pool::StablePool";
    asset_0: _0x1.coin.Coin<T0>;
    asset_1: _0x1.coin.Coin<T1>;
    asset_2: _0x1.coin.Coin<T2>;
    asset_3: _0x1.coin.Coin<T3>;
    amplification_factor: bigint;
    precision_multipliers: bigint[];
    swap_fee_ratio: _0x92285e3fb7903c2b2fd17d96da946cbd76b927a1bad1649f465b698af5f76e87.fixed_point64.FixedPoint64;
    pool_token_mint_cap: _0x1.coin.MintCapability<
      _0x66c2cd54520b51294f62392203ed87de0e7c47b3650f5ed0fbe1578835275b8c.stable_pool_lp_coin.StablePoolToken<
        T0,
        T1,
        T2,
        T3
      >
    >;
    pool_token_burn_cap: _0x1.coin.BurnCapability<
      _0x66c2cd54520b51294f62392203ed87de0e7c47b3650f5ed0fbe1578835275b8c.stable_pool_lp_coin.StablePoolToken<
        T0,
        T1,
        T2,
        T3
      >
    >;
    reserved_lp_coin: _0x1.coin.Coin<
      _0x66c2cd54520b51294f62392203ed87de0e7c47b3650f5ed0fbe1578835275b8c.stable_pool_lp_coin.StablePoolToken<
        T0,
        T1,
        T2,
        T3
      >
    >;
    events: stable_pool.StablePoolEvents<T0, T1, T2, T3>;
  }

  export class StablePoolAccountCapability {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::stable_pool::StablePoolAccountCapability";
    signer_cap: _0x1.account.SignerCapability;
  }

  export class StablePoolCreationEvent<T0, T1, T2, T3> {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::stable_pool::StablePoolCreationEvent";
    creator: Address;
    amount_0: bigint;
    amount_1: bigint;
    amount_2: bigint;
    amount_3: bigint;
    minted_lp_coin_amount: bigint;
    swap_fee_bps: bigint;
  }

  export interface StablePoolCreationEventInstance
    extends TypedEventInstance<StablePoolCreationEvent<any, any, any, any>> {
    data_typed: StablePoolCreationEvent<any, any, any, any>;
    type_arguments: [string, string, string, string];
  }

  export class StablePoolEvents<T0, T1, T2, T3> {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::stable_pool::StablePoolEvents";
    pool_creation_events: _0x1.event.EventHandle<
      stable_pool.StablePoolCreationEvent<T0, T1, T2, T3>
    >;
    add_liquidity_events: _0x1.event.EventHandle<
      stable_pool.AddLiquidityEvent<T0, T1, T2, T3>
    >;
    remove_liquidity_events: _0x1.event.EventHandle<
      stable_pool.RemoveLiquidityEvent<T0, T1, T2, T3>
    >;
    swap_events: _0x1.event.EventHandle<stable_pool.SwapEvent<T0, T1, T2, T3>>;
    param_change_events: _0x1.event.EventHandle<stable_pool.StablePoolParamChangeEvent>;
  }

  export class StablePoolParamChangeEvent {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::stable_pool::StablePoolParamChangeEvent";
    name: string;
    prev_value: bigint;
    new_value: bigint;
  }

  export interface StablePoolParamChangeEventInstance
    extends TypedEventInstance<StablePoolParamChangeEvent> {
    data_typed: StablePoolParamChangeEvent;
    type_arguments: [];
  }

  export class StablePoolParams {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::stable_pool::StablePoolParams";
    default_swap_fee_ratio: _0x92285e3fb7903c2b2fd17d96da946cbd76b927a1bad1649f465b698af5f76e87.fixed_point64.FixedPoint64;
    param_change_events: _0x1.event.EventHandle<stable_pool.StablePoolParamChangeEvent>;
  }

  export class SwapEvent<T0, T1, T2, T3> {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::stable_pool::SwapEvent";
    asset_in_index: bigint;
    asset_out_index: bigint;
    amount_in: bigint;
    amount_out: bigint;
    fee_amount: bigint;
    pool_balance_0: bigint;
    pool_balance_1: bigint;
    pool_balance_2: bigint;
    pool_balance_3: bigint;
    amplification_factor: bigint;
  }

  export interface SwapEventInstance
    extends TypedEventInstance<SwapEvent<any, any, any, any>> {
    data_typed: SwapEvent<any, any, any, any>;
    type_arguments: [string, string, string, string];
  }

  export interface InitializePayload extends TypedEntryFunctionPayload<[]> {
    arguments_typed: [];
    type_arguments: [];
  }

  export interface SetAmplicationFactorPayload<
    T0 = any,
    T1 = any,
    T2 = any,
    T3 = any
  > extends TypedEntryFunctionPayload<[bigint]> {
    arguments_typed: [bigint];
    type_arguments: [string, string, string, string];
  }

  export interface SetDefaultPoolSwapFeeBpsPayload
    extends TypedEntryFunctionPayload<[bigint]> {
    arguments_typed: [bigint];
    type_arguments: [];
  }

  export interface SetPoolSwapFeeBpsPayload<
    T0 = any,
    T1 = any,
    T2 = any,
    T3 = any
  > extends TypedEntryFunctionPayload<[bigint]> {
    arguments_typed: [bigint];
    type_arguments: [string, string, string, string];
  }

  export function loadTypes(_r: TypeRegistry) {
    loadAllTypes(_r);
  }
  export const ABI: MoveModule = JSON.parse(
    '{"address":"0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba","name":"stable_pool","friends":[],"exposed_functions":[{"name":"add_liquidity","visibility":"public","is_entry":false,"generic_type_params":[{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]}],"params":["&signer","0x1::coin::Coin<T0>","0x1::coin::Coin<T1>","0x1::coin::Coin<T2>","0x1::coin::Coin<T3>"],"return":["0x1::coin::Coin<0x66c2cd54520b51294f62392203ed87de0e7c47b3650f5ed0fbe1578835275b8c::stable_pool_lp_coin::StablePoolToken<T0, T1, T2, T3>>"]},{"name":"create_stable_pool","visibility":"public","is_entry":false,"generic_type_params":[{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]}],"params":["&signer","0x1::coin::Coin<T0>","0x1::coin::Coin<T1>","0x1::coin::Coin<T2>","0x1::coin::Coin<T3>","u64"],"return":["0x1::coin::Coin<0x66c2cd54520b51294f62392203ed87de0e7c47b3650f5ed0fbe1578835275b8c::stable_pool_lp_coin::StablePoolToken<T0, T1, T2, T3>>"]},{"name":"initialize","visibility":"public","is_entry":true,"generic_type_params":[],"params":["&signer"],"return":[]},{"name":"initialized","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["bool"]},{"name":"remove_liquidity","visibility":"public","is_entry":false,"generic_type_params":[{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]}],"params":["&signer","0x1::coin::Coin<0x66c2cd54520b51294f62392203ed87de0e7c47b3650f5ed0fbe1578835275b8c::stable_pool_lp_coin::StablePoolToken<T0, T1, T2, T3>>"],"return":["0x1::coin::Coin<T0>","0x1::coin::Coin<T1>","0x1::coin::Coin<T2>","0x1::coin::Coin<T3>"]},{"name":"set_amplication_factor","visibility":"public","is_entry":true,"generic_type_params":[{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]}],"params":["&signer","u64"],"return":[]},{"name":"set_default_pool_swap_fee_bps","visibility":"public","is_entry":true,"generic_type_params":[],"params":["&signer","u64"],"return":[]},{"name":"set_pool_swap_fee_bps","visibility":"public","is_entry":true,"generic_type_params":[{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]}],"params":["&signer","u64"],"return":[]},{"name":"swap","visibility":"public","is_entry":false,"generic_type_params":[{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]}],"params":["0x1::coin::Coin<T4>"],"return":["0x1::coin::Coin<T5>"]}],"structs":[{"name":"AddLiquidityEvent","is_native":false,"abilities":["drop","store"],"generic_type_params":[{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]}],"fields":[{"name":"amount_0","type":"u64"},{"name":"amount_1","type":"u64"},{"name":"amount_2","type":"u64"},{"name":"amount_3","type":"u64"},{"name":"minted_lp_coin_amount","type":"u64"}]},{"name":"RemoveLiquidityEvent","is_native":false,"abilities":["drop","store"],"generic_type_params":[{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]}],"fields":[{"name":"amount_0","type":"u64"},{"name":"amount_1","type":"u64"},{"name":"amount_2","type":"u64"},{"name":"amount_3","type":"u64"},{"name":"burned_lp_coin_amount","type":"u64"}]},{"name":"StablePool","is_native":false,"abilities":["key"],"generic_type_params":[{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]}],"fields":[{"name":"asset_0","type":"0x1::coin::Coin<T0>"},{"name":"asset_1","type":"0x1::coin::Coin<T1>"},{"name":"asset_2","type":"0x1::coin::Coin<T2>"},{"name":"asset_3","type":"0x1::coin::Coin<T3>"},{"name":"amplification_factor","type":"u64"},{"name":"precision_multipliers","type":"vector<u64>"},{"name":"swap_fee_ratio","type":"0x92285e3fb7903c2b2fd17d96da946cbd76b927a1bad1649f465b698af5f76e87::fixed_point64::FixedPoint64"},{"name":"pool_token_mint_cap","type":"0x1::coin::MintCapability<0x66c2cd54520b51294f62392203ed87de0e7c47b3650f5ed0fbe1578835275b8c::stable_pool_lp_coin::StablePoolToken<T0, T1, T2, T3>>"},{"name":"pool_token_burn_cap","type":"0x1::coin::BurnCapability<0x66c2cd54520b51294f62392203ed87de0e7c47b3650f5ed0fbe1578835275b8c::stable_pool_lp_coin::StablePoolToken<T0, T1, T2, T3>>"},{"name":"reserved_lp_coin","type":"0x1::coin::Coin<0x66c2cd54520b51294f62392203ed87de0e7c47b3650f5ed0fbe1578835275b8c::stable_pool_lp_coin::StablePoolToken<T0, T1, T2, T3>>"},{"name":"events","type":"0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::stable_pool::StablePoolEvents<T0, T1, T2, T3>"}]},{"name":"StablePoolAccountCapability","is_native":false,"abilities":["key"],"generic_type_params":[],"fields":[{"name":"signer_cap","type":"0x1::account::SignerCapability"}]},{"name":"StablePoolCreationEvent","is_native":false,"abilities":["drop","store"],"generic_type_params":[{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]}],"fields":[{"name":"creator","type":"address"},{"name":"amount_0","type":"u64"},{"name":"amount_1","type":"u64"},{"name":"amount_2","type":"u64"},{"name":"amount_3","type":"u64"},{"name":"minted_lp_coin_amount","type":"u64"},{"name":"swap_fee_bps","type":"u64"}]},{"name":"StablePoolEvents","is_native":false,"abilities":["store"],"generic_type_params":[{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]}],"fields":[{"name":"pool_creation_events","type":"0x1::event::EventHandle<0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::stable_pool::StablePoolCreationEvent<T0, T1, T2, T3>>"},{"name":"add_liquidity_events","type":"0x1::event::EventHandle<0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::stable_pool::AddLiquidityEvent<T0, T1, T2, T3>>"},{"name":"remove_liquidity_events","type":"0x1::event::EventHandle<0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::stable_pool::RemoveLiquidityEvent<T0, T1, T2, T3>>"},{"name":"swap_events","type":"0x1::event::EventHandle<0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::stable_pool::SwapEvent<T0, T1, T2, T3>>"},{"name":"param_change_events","type":"0x1::event::EventHandle<0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::stable_pool::StablePoolParamChangeEvent>"}]},{"name":"StablePoolParamChangeEvent","is_native":false,"abilities":["drop","store"],"generic_type_params":[],"fields":[{"name":"name","type":"0x1::string::String"},{"name":"prev_value","type":"u64"},{"name":"new_value","type":"u64"}]},{"name":"StablePoolParams","is_native":false,"abilities":["key"],"generic_type_params":[],"fields":[{"name":"default_swap_fee_ratio","type":"0x92285e3fb7903c2b2fd17d96da946cbd76b927a1bad1649f465b698af5f76e87::fixed_point64::FixedPoint64"},{"name":"param_change_events","type":"0x1::event::EventHandle<0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::stable_pool::StablePoolParamChangeEvent>"}]},{"name":"SwapEvent","is_native":false,"abilities":["drop","store"],"generic_type_params":[{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]}],"fields":[{"name":"asset_in_index","type":"u64"},{"name":"asset_out_index","type":"u64"},{"name":"amount_in","type":"u64"},{"name":"amount_out","type":"u64"},{"name":"fee_amount","type":"u64"},{"name":"pool_balance_0","type":"u64"},{"name":"pool_balance_1","type":"u64"},{"name":"pool_balance_2","type":"u64"},{"name":"pool_balance_3","type":"u64"},{"name":"amplification_factor","type":"u64"}]}]}'
  );
}

export class fees_scripts extends AptosBaseProcessor {
  constructor(options: AptosBindOptions) {
    super("fees_scripts", options);
  }
  static DEFAULT_OPTIONS: AptosBindOptions = {
    address:
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba",
    network: AptosNetwork.TEST_NET,
  };

  static bind(options: Partial<AptosBindOptions> = {}): fees_scripts {
    return new fees_scripts({ ...fees_scripts.DEFAULT_OPTIONS, ...options });
  }

  onEntryTransferFee(
    func: (call: fees_scripts.TransferFeePayload, ctx: AptosContext) => void,
    filter?: CallFilter,
    fetchConfig?: AptosFetchConfig
  ): fees_scripts {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "fees_scripts::transfer_fee",
      },
      fetchConfig
    );
    return this;
  }

  loadTypesInternal(registry: TypeRegistry) {
    loadAllTypes(registry);
  }
}

export namespace fees_scripts {
  export interface TransferFeePayload<T0 = any>
    extends TypedEntryFunctionPayload<[Address, bigint]> {
    arguments_typed: [Address, bigint];
    type_arguments: [string];
  }

  export function loadTypes(_r: TypeRegistry) {
    loadAllTypes(_r);
  }
  export const ABI: MoveModule = JSON.parse(
    '{"address":"0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba","name":"fees_scripts","friends":[],"exposed_functions":[{"name":"transfer_fee","visibility":"public","is_entry":true,"generic_type_params":[{"constraints":[]}],"params":["&signer","address","u64"],"return":[]}],"structs":[]}'
  );
}

export namespace weighted_math {
  export function loadTypes(_r: TypeRegistry) {
    loadAllTypes(_r);
  }
  export const ABI: MoveModule = JSON.parse(
    '{"address":"0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba","name":"weighted_math","friends":[],"exposed_functions":[{"name":"calc_in_given_out","visibility":"public","is_entry":false,"generic_type_params":[],"params":["u64","u64","u64","u64","u64"],"return":["u64"]},{"name":"calc_out_given_in","visibility":"public","is_entry":false,"generic_type_params":[],"params":["u64","u64","u64","u64","u64"],"return":["u64"]},{"name":"compute_asset_amount_to_return","visibility":"public","is_entry":false,"generic_type_params":[],"params":["u64","u64","u128"],"return":["u64"]},{"name":"compute_invariant","visibility":"public","is_entry":false,"generic_type_params":[],"params":["u64","u64","u64","u64","u64","u64","u64","u64"],"return":["0x92285e3fb7903c2b2fd17d96da946cbd76b927a1bad1649f465b698af5f76e87::fixed_point64::FixedPoint64"]},{"name":"compute_pool_tokens_issued","visibility":"public","is_entry":false,"generic_type_params":[],"params":["u64","u64","u64","u64","u64","u64","u64","u64","u128"],"return":["u64","u64","u64","u64","u64"]},{"name":"compute_protocol_fees","visibility":"public","is_entry":false,"generic_type_params":[],"params":["0x92285e3fb7903c2b2fd17d96da946cbd76b927a1bad1649f465b698af5f76e87::fixed_point64::FixedPoint64","0x92285e3fb7903c2b2fd17d96da946cbd76b927a1bad1649f465b698af5f76e87::fixed_point64::FixedPoint64","u128","0x92285e3fb7903c2b2fd17d96da946cbd76b927a1bad1649f465b698af5f76e87::fixed_point64::FixedPoint64"],"return":["u64"]}],"structs":[]}'
  );
}

export class weighted_pool extends AptosBaseProcessor {
  constructor(options: AptosBindOptions) {
    super("weighted_pool", options);
  }
  static DEFAULT_OPTIONS: AptosBindOptions = {
    address:
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba",
    network: AptosNetwork.TEST_NET,
  };

  static bind(options: Partial<AptosBindOptions> = {}): weighted_pool {
    return new weighted_pool({ ...weighted_pool.DEFAULT_OPTIONS, ...options });
  }

  onEntryInitialize(
    func: (call: weighted_pool.InitializePayload, ctx: AptosContext) => void,
    filter?: CallFilter,
    fetchConfig?: AptosFetchConfig
  ): weighted_pool {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "weighted_pool::initialize",
      },
      fetchConfig
    );
    return this;
  }

  onEntrySetDefaultPoolSwapFeeBps(
    func: (
      call: weighted_pool.SetDefaultPoolSwapFeeBpsPayload,
      ctx: AptosContext
    ) => void,
    filter?: CallFilter,
    fetchConfig?: AptosFetchConfig
  ): weighted_pool {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "weighted_pool::set_default_pool_swap_fee_bps",
      },
      fetchConfig
    );
    return this;
  }

  onEntrySetPoolSwapFeeBps(
    func: (
      call: weighted_pool.SetPoolSwapFeeBpsPayload,
      ctx: AptosContext
    ) => void,
    filter?: CallFilter,
    fetchConfig?: AptosFetchConfig
  ): weighted_pool {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "weighted_pool::set_pool_swap_fee_bps",
      },
      fetchConfig
    );
    return this;
  }

  onEventWeightedPoolCreationEvent(
    func: (
      event: weighted_pool.WeightedPoolCreationEventInstance,
      ctx: AptosContext
    ) => void,
    fetchConfig?: AptosFetchConfig
  ): weighted_pool {
    this.onEvent(
      func,
      {
        type: "weighted_pool::WeightedPoolCreationEvent",
      },
      fetchConfig
    );
    return this;
  }

  onEventAddLiquidityEvent(
    func: (
      event: weighted_pool.AddLiquidityEventInstance,
      ctx: AptosContext
    ) => void,
    fetchConfig?: AptosFetchConfig
  ): weighted_pool {
    this.onEvent(
      func,
      {
        type: "weighted_pool::AddLiquidityEvent",
      },
      fetchConfig
    );
    return this;
  }

  onEventRemoveLiquidityEvent(
    func: (
      event: weighted_pool.RemoveLiquidityEventInstance,
      ctx: AptosContext
    ) => void,
    fetchConfig?: AptosFetchConfig
  ): weighted_pool {
    this.onEvent(
      func,
      {
        type: "weighted_pool::RemoveLiquidityEvent",
      },
      fetchConfig
    );
    return this;
  }

  onEventSwapEvent(
    func: (event: weighted_pool.SwapEventInstance, ctx: AptosContext) => void,
    fetchConfig?: AptosFetchConfig
  ): weighted_pool {
    this.onEvent(
      func,
      {
        type: "weighted_pool::SwapEvent",
      },
      fetchConfig
    );
    return this;
  }

  onEventWeightedPoolParamChangeEvent(
    func: (
      event: weighted_pool.WeightedPoolParamChangeEventInstance,
      ctx: AptosContext
    ) => void,
    fetchConfig?: AptosFetchConfig
  ): weighted_pool {
    this.onEvent(
      func,
      {
        type: "weighted_pool::WeightedPoolParamChangeEvent",
      },
      fetchConfig
    );
    return this;
  }

  loadTypesInternal(registry: TypeRegistry) {
    loadAllTypes(registry);
  }
}

export namespace weighted_pool {
  export class AddLiquidityEvent<T0, T1, T2, T3, T4, T5, T6, T7> {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::weighted_pool::AddLiquidityEvent";
    amount_0: bigint;
    amount_1: bigint;
    amount_2: bigint;
    amount_3: bigint;
    minted_lp_coin_amount: bigint;
  }

  export interface AddLiquidityEventInstance
    extends TypedEventInstance<
      AddLiquidityEvent<any, any, any, any, any, any, any, any>
    > {
    data_typed: AddLiquidityEvent<any, any, any, any, any, any, any, any>;
    type_arguments: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ];
  }

  export class RemoveLiquidityEvent<T0, T1, T2, T3, T4, T5, T6, T7> {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::weighted_pool::RemoveLiquidityEvent";
    amount_0: bigint;
    amount_1: bigint;
    amount_2: bigint;
    amount_3: bigint;
    burned_lp_coin_amount: bigint;
  }

  export interface RemoveLiquidityEventInstance
    extends TypedEventInstance<
      RemoveLiquidityEvent<any, any, any, any, any, any, any, any>
    > {
    data_typed: RemoveLiquidityEvent<any, any, any, any, any, any, any, any>;
    type_arguments: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ];
  }

  export class SwapEvent<T0, T1, T2, T3, T4, T5, T6, T7> {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::weighted_pool::SwapEvent";
    asset_in_index: bigint;
    asset_out_index: bigint;
    amount_in: bigint;
    amount_out: bigint;
    fee_amount: bigint;
    pool_balance_0: bigint;
    pool_balance_1: bigint;
    pool_balance_2: bigint;
    pool_balance_3: bigint;
  }

  export interface SwapEventInstance
    extends TypedEventInstance<
      SwapEvent<any, any, any, any, any, any, any, any>
    > {
    data_typed: SwapEvent<any, any, any, any, any, any, any, any>;
    type_arguments: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ];
  }

  export class Weight_10 {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::weighted_pool::Weight_10";
    dummy_field: Boolean;
  }

  export class Weight_15 {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::weighted_pool::Weight_15";
    dummy_field: Boolean;
  }

  export class Weight_20 {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::weighted_pool::Weight_20";
    dummy_field: Boolean;
  }

  export class Weight_25 {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::weighted_pool::Weight_25";
    dummy_field: Boolean;
  }

  export class Weight_30 {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::weighted_pool::Weight_30";
    dummy_field: Boolean;
  }

  export class Weight_35 {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::weighted_pool::Weight_35";
    dummy_field: Boolean;
  }

  export class Weight_40 {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::weighted_pool::Weight_40";
    dummy_field: Boolean;
  }

  export class Weight_45 {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::weighted_pool::Weight_45";
    dummy_field: Boolean;
  }

  export class Weight_5 {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::weighted_pool::Weight_5";
    dummy_field: Boolean;
  }

  export class Weight_50 {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::weighted_pool::Weight_50";
    dummy_field: Boolean;
  }

  export class Weight_55 {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::weighted_pool::Weight_55";
    dummy_field: Boolean;
  }

  export class Weight_60 {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::weighted_pool::Weight_60";
    dummy_field: Boolean;
  }

  export class Weight_65 {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::weighted_pool::Weight_65";
    dummy_field: Boolean;
  }

  export class Weight_70 {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::weighted_pool::Weight_70";
    dummy_field: Boolean;
  }

  export class Weight_75 {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::weighted_pool::Weight_75";
    dummy_field: Boolean;
  }

  export class Weight_80 {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::weighted_pool::Weight_80";
    dummy_field: Boolean;
  }

  export class Weight_85 {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::weighted_pool::Weight_85";
    dummy_field: Boolean;
  }

  export class Weight_90 {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::weighted_pool::Weight_90";
    dummy_field: Boolean;
  }

  export class Weight_95 {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::weighted_pool::Weight_95";
    dummy_field: Boolean;
  }

  export class WeightedPool<T0, T1, T2, T3, T4, T5, T6, T7> {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::weighted_pool::WeightedPool";
    asset_0: _0x1.coin.Coin<T0>;
    asset_1: _0x1.coin.Coin<T1>;
    asset_2: _0x1.coin.Coin<T2>;
    asset_3: _0x1.coin.Coin<T3>;
    weight_0: bigint;
    weight_1: bigint;
    weight_2: bigint;
    weight_3: bigint;
    swap_fee_ratio: _0x92285e3fb7903c2b2fd17d96da946cbd76b927a1bad1649f465b698af5f76e87.fixed_point64.FixedPoint64;
    inverse_negated_swap_fee_ratio: _0x92285e3fb7903c2b2fd17d96da946cbd76b927a1bad1649f465b698af5f76e87.fixed_point64.FixedPoint64;
    pool_token_mint_cap: _0x1.coin.MintCapability<
      _0x504b41d0fe4a9424ddc4ddd3517acbfc23f17805e2fb82d5caf8d9fcfeb28a02.weighted_pool_lp_coin.WeightedPoolToken<
        T0,
        T1,
        T2,
        T3,
        T4,
        T5,
        T6,
        T7
      >
    >;
    pool_token_burn_cap: _0x1.coin.BurnCapability<
      _0x504b41d0fe4a9424ddc4ddd3517acbfc23f17805e2fb82d5caf8d9fcfeb28a02.weighted_pool_lp_coin.WeightedPoolToken<
        T0,
        T1,
        T2,
        T3,
        T4,
        T5,
        T6,
        T7
      >
    >;
    reserved_lp_coin: _0x1.coin.Coin<
      _0x504b41d0fe4a9424ddc4ddd3517acbfc23f17805e2fb82d5caf8d9fcfeb28a02.weighted_pool_lp_coin.WeightedPoolToken<
        T0,
        T1,
        T2,
        T3,
        T4,
        T5,
        T6,
        T7
      >
    >;
    events: weighted_pool.WeightedPoolEvents<T0, T1, T2, T3, T4, T5, T6, T7>;
  }

  export class WeightedPoolAccountCapability {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::weighted_pool::WeightedPoolAccountCapability";
    signer_cap: _0x1.account.SignerCapability;
  }

  export class WeightedPoolCreationEvent<T0, T1, T2, T3, T4, T5, T6, T7> {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::weighted_pool::WeightedPoolCreationEvent";
    creator: Address;
    amount_0: bigint;
    amount_1: bigint;
    amount_2: bigint;
    amount_3: bigint;
    minted_lp_coin_amount: bigint;
    swap_fee_bps: bigint;
  }

  export interface WeightedPoolCreationEventInstance
    extends TypedEventInstance<
      WeightedPoolCreationEvent<any, any, any, any, any, any, any, any>
    > {
    data_typed: WeightedPoolCreationEvent<
      any,
      any,
      any,
      any,
      any,
      any,
      any,
      any
    >;
    type_arguments: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ];
  }

  export class WeightedPoolEvents<T0, T1, T2, T3, T4, T5, T6, T7> {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::weighted_pool::WeightedPoolEvents";
    pool_creation_events: _0x1.event.EventHandle<
      weighted_pool.WeightedPoolCreationEvent<T0, T1, T2, T3, T4, T5, T6, T7>
    >;
    add_liquidity_events: _0x1.event.EventHandle<
      weighted_pool.AddLiquidityEvent<T0, T1, T2, T3, T4, T5, T6, T7>
    >;
    remove_liquidity_events: _0x1.event.EventHandle<
      weighted_pool.RemoveLiquidityEvent<T0, T1, T2, T3, T4, T5, T6, T7>
    >;
    swap_events: _0x1.event.EventHandle<
      weighted_pool.SwapEvent<T0, T1, T2, T3, T4, T5, T6, T7>
    >;
    param_change_events: _0x1.event.EventHandle<weighted_pool.WeightedPoolParamChangeEvent>;
  }

  export class WeightedPoolParamChangeEvent {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::weighted_pool::WeightedPoolParamChangeEvent";
    name: string;
    prev_value: bigint;
    new_value: bigint;
  }

  export interface WeightedPoolParamChangeEventInstance
    extends TypedEventInstance<WeightedPoolParamChangeEvent> {
    data_typed: WeightedPoolParamChangeEvent;
    type_arguments: [];
  }

  export class WeightedPoolParams {
    static TYPE_QNAME =
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::weighted_pool::WeightedPoolParams";
    default_swap_fee_ratio: _0x92285e3fb7903c2b2fd17d96da946cbd76b927a1bad1649f465b698af5f76e87.fixed_point64.FixedPoint64;
    param_change_events: _0x1.event.EventHandle<weighted_pool.WeightedPoolParamChangeEvent>;
  }

  export interface InitializePayload extends TypedEntryFunctionPayload<[]> {
    arguments_typed: [];
    type_arguments: [];
  }

  export interface SetDefaultPoolSwapFeeBpsPayload
    extends TypedEntryFunctionPayload<[bigint]> {
    arguments_typed: [bigint];
    type_arguments: [];
  }

  export interface SetPoolSwapFeeBpsPayload<
    T0 = any,
    T1 = any,
    T2 = any,
    T3 = any,
    T4 = any,
    T5 = any,
    T6 = any,
    T7 = any
  > extends TypedEntryFunctionPayload<[bigint]> {
    arguments_typed: [bigint];
    type_arguments: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ];
  }

  export function loadTypes(_r: TypeRegistry) {
    loadAllTypes(_r);
  }
  export const ABI: MoveModule = JSON.parse(
    '{"address":"0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba","name":"weighted_pool","friends":[],"exposed_functions":[{"name":"add_liquidity","visibility":"public","is_entry":false,"generic_type_params":[{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]}],"params":["0x1::coin::Coin<T0>","0x1::coin::Coin<T1>","0x1::coin::Coin<T2>","0x1::coin::Coin<T3>"],"return":["0x1::coin::Coin<0x504b41d0fe4a9424ddc4ddd3517acbfc23f17805e2fb82d5caf8d9fcfeb28a02::weighted_pool_lp_coin::WeightedPoolToken<T0, T1, T2, T3, T4, T5, T6, T7>>","0x1::coin::Coin<T0>","0x1::coin::Coin<T1>","0x1::coin::Coin<T2>","0x1::coin::Coin<T3>"]},{"name":"create_weighted_pool","visibility":"public","is_entry":false,"generic_type_params":[{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]}],"params":["&signer","0x1::coin::Coin<T0>","0x1::coin::Coin<T1>","0x1::coin::Coin<T2>","0x1::coin::Coin<T3>"],"return":["0x1::coin::Coin<0x504b41d0fe4a9424ddc4ddd3517acbfc23f17805e2fb82d5caf8d9fcfeb28a02::weighted_pool_lp_coin::WeightedPoolToken<T0, T1, T2, T3, T4, T5, T6, T7>>"]},{"name":"initialize","visibility":"public","is_entry":true,"generic_type_params":[],"params":["&signer"],"return":[]},{"name":"initialized","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["bool"]},{"name":"remove_liquidity","visibility":"public","is_entry":false,"generic_type_params":[{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]}],"params":["0x1::coin::Coin<0x504b41d0fe4a9424ddc4ddd3517acbfc23f17805e2fb82d5caf8d9fcfeb28a02::weighted_pool_lp_coin::WeightedPoolToken<T0, T1, T2, T3, T4, T5, T6, T7>>"],"return":["0x1::coin::Coin<T0>","0x1::coin::Coin<T1>","0x1::coin::Coin<T2>","0x1::coin::Coin<T3>"]},{"name":"set_default_pool_swap_fee_bps","visibility":"public","is_entry":true,"generic_type_params":[],"params":["&signer","u64"],"return":[]},{"name":"set_pool_swap_fee_bps","visibility":"public","is_entry":true,"generic_type_params":[{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]}],"params":["&signer","u64"],"return":[]},{"name":"swap_exact_in","visibility":"public","is_entry":false,"generic_type_params":[{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]}],"params":["0x1::coin::Coin<T8>"],"return":["0x1::coin::Coin<T9>"]},{"name":"swap_exact_out","visibility":"public","is_entry":false,"generic_type_params":[{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]}],"params":["0x1::coin::Coin<T8>","u64"],"return":["0x1::coin::Coin<T8>","0x1::coin::Coin<T9>"]}],"structs":[{"name":"AddLiquidityEvent","is_native":false,"abilities":["drop","store"],"generic_type_params":[{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]}],"fields":[{"name":"amount_0","type":"u64"},{"name":"amount_1","type":"u64"},{"name":"amount_2","type":"u64"},{"name":"amount_3","type":"u64"},{"name":"minted_lp_coin_amount","type":"u64"}]},{"name":"RemoveLiquidityEvent","is_native":false,"abilities":["drop","store"],"generic_type_params":[{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]}],"fields":[{"name":"amount_0","type":"u64"},{"name":"amount_1","type":"u64"},{"name":"amount_2","type":"u64"},{"name":"amount_3","type":"u64"},{"name":"burned_lp_coin_amount","type":"u64"}]},{"name":"SwapEvent","is_native":false,"abilities":["drop","store"],"generic_type_params":[{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]}],"fields":[{"name":"asset_in_index","type":"u64"},{"name":"asset_out_index","type":"u64"},{"name":"amount_in","type":"u64"},{"name":"amount_out","type":"u64"},{"name":"fee_amount","type":"u64"},{"name":"pool_balance_0","type":"u64"},{"name":"pool_balance_1","type":"u64"},{"name":"pool_balance_2","type":"u64"},{"name":"pool_balance_3","type":"u64"}]},{"name":"Weight_10","is_native":false,"abilities":[],"generic_type_params":[],"fields":[{"name":"dummy_field","type":"bool"}]},{"name":"Weight_15","is_native":false,"abilities":[],"generic_type_params":[],"fields":[{"name":"dummy_field","type":"bool"}]},{"name":"Weight_20","is_native":false,"abilities":[],"generic_type_params":[],"fields":[{"name":"dummy_field","type":"bool"}]},{"name":"Weight_25","is_native":false,"abilities":[],"generic_type_params":[],"fields":[{"name":"dummy_field","type":"bool"}]},{"name":"Weight_30","is_native":false,"abilities":[],"generic_type_params":[],"fields":[{"name":"dummy_field","type":"bool"}]},{"name":"Weight_35","is_native":false,"abilities":[],"generic_type_params":[],"fields":[{"name":"dummy_field","type":"bool"}]},{"name":"Weight_40","is_native":false,"abilities":[],"generic_type_params":[],"fields":[{"name":"dummy_field","type":"bool"}]},{"name":"Weight_45","is_native":false,"abilities":[],"generic_type_params":[],"fields":[{"name":"dummy_field","type":"bool"}]},{"name":"Weight_5","is_native":false,"abilities":[],"generic_type_params":[],"fields":[{"name":"dummy_field","type":"bool"}]},{"name":"Weight_50","is_native":false,"abilities":[],"generic_type_params":[],"fields":[{"name":"dummy_field","type":"bool"}]},{"name":"Weight_55","is_native":false,"abilities":[],"generic_type_params":[],"fields":[{"name":"dummy_field","type":"bool"}]},{"name":"Weight_60","is_native":false,"abilities":[],"generic_type_params":[],"fields":[{"name":"dummy_field","type":"bool"}]},{"name":"Weight_65","is_native":false,"abilities":[],"generic_type_params":[],"fields":[{"name":"dummy_field","type":"bool"}]},{"name":"Weight_70","is_native":false,"abilities":[],"generic_type_params":[],"fields":[{"name":"dummy_field","type":"bool"}]},{"name":"Weight_75","is_native":false,"abilities":[],"generic_type_params":[],"fields":[{"name":"dummy_field","type":"bool"}]},{"name":"Weight_80","is_native":false,"abilities":[],"generic_type_params":[],"fields":[{"name":"dummy_field","type":"bool"}]},{"name":"Weight_85","is_native":false,"abilities":[],"generic_type_params":[],"fields":[{"name":"dummy_field","type":"bool"}]},{"name":"Weight_90","is_native":false,"abilities":[],"generic_type_params":[],"fields":[{"name":"dummy_field","type":"bool"}]},{"name":"Weight_95","is_native":false,"abilities":[],"generic_type_params":[],"fields":[{"name":"dummy_field","type":"bool"}]},{"name":"WeightedPool","is_native":false,"abilities":["key"],"generic_type_params":[{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]}],"fields":[{"name":"asset_0","type":"0x1::coin::Coin<T0>"},{"name":"asset_1","type":"0x1::coin::Coin<T1>"},{"name":"asset_2","type":"0x1::coin::Coin<T2>"},{"name":"asset_3","type":"0x1::coin::Coin<T3>"},{"name":"weight_0","type":"u64"},{"name":"weight_1","type":"u64"},{"name":"weight_2","type":"u64"},{"name":"weight_3","type":"u64"},{"name":"swap_fee_ratio","type":"0x92285e3fb7903c2b2fd17d96da946cbd76b927a1bad1649f465b698af5f76e87::fixed_point64::FixedPoint64"},{"name":"inverse_negated_swap_fee_ratio","type":"0x92285e3fb7903c2b2fd17d96da946cbd76b927a1bad1649f465b698af5f76e87::fixed_point64::FixedPoint64"},{"name":"pool_token_mint_cap","type":"0x1::coin::MintCapability<0x504b41d0fe4a9424ddc4ddd3517acbfc23f17805e2fb82d5caf8d9fcfeb28a02::weighted_pool_lp_coin::WeightedPoolToken<T0, T1, T2, T3, T4, T5, T6, T7>>"},{"name":"pool_token_burn_cap","type":"0x1::coin::BurnCapability<0x504b41d0fe4a9424ddc4ddd3517acbfc23f17805e2fb82d5caf8d9fcfeb28a02::weighted_pool_lp_coin::WeightedPoolToken<T0, T1, T2, T3, T4, T5, T6, T7>>"},{"name":"reserved_lp_coin","type":"0x1::coin::Coin<0x504b41d0fe4a9424ddc4ddd3517acbfc23f17805e2fb82d5caf8d9fcfeb28a02::weighted_pool_lp_coin::WeightedPoolToken<T0, T1, T2, T3, T4, T5, T6, T7>>"},{"name":"events","type":"0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::weighted_pool::WeightedPoolEvents<T0, T1, T2, T3, T4, T5, T6, T7>"}]},{"name":"WeightedPoolAccountCapability","is_native":false,"abilities":["key"],"generic_type_params":[],"fields":[{"name":"signer_cap","type":"0x1::account::SignerCapability"}]},{"name":"WeightedPoolCreationEvent","is_native":false,"abilities":["drop","store"],"generic_type_params":[{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]}],"fields":[{"name":"creator","type":"address"},{"name":"amount_0","type":"u64"},{"name":"amount_1","type":"u64"},{"name":"amount_2","type":"u64"},{"name":"amount_3","type":"u64"},{"name":"minted_lp_coin_amount","type":"u64"},{"name":"swap_fee_bps","type":"u64"}]},{"name":"WeightedPoolEvents","is_native":false,"abilities":["store"],"generic_type_params":[{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]}],"fields":[{"name":"pool_creation_events","type":"0x1::event::EventHandle<0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::weighted_pool::WeightedPoolCreationEvent<T0, T1, T2, T3, T4, T5, T6, T7>>"},{"name":"add_liquidity_events","type":"0x1::event::EventHandle<0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::weighted_pool::AddLiquidityEvent<T0, T1, T2, T3, T4, T5, T6, T7>>"},{"name":"remove_liquidity_events","type":"0x1::event::EventHandle<0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::weighted_pool::RemoveLiquidityEvent<T0, T1, T2, T3, T4, T5, T6, T7>>"},{"name":"swap_events","type":"0x1::event::EventHandle<0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::weighted_pool::SwapEvent<T0, T1, T2, T3, T4, T5, T6, T7>>"},{"name":"param_change_events","type":"0x1::event::EventHandle<0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::weighted_pool::WeightedPoolParamChangeEvent>"}]},{"name":"WeightedPoolParamChangeEvent","is_native":false,"abilities":["drop","store"],"generic_type_params":[],"fields":[{"name":"name","type":"0x1::string::String"},{"name":"prev_value","type":"u64"},{"name":"new_value","type":"u64"}]},{"name":"WeightedPoolParams","is_native":false,"abilities":["key"],"generic_type_params":[],"fields":[{"name":"default_swap_fee_ratio","type":"0x92285e3fb7903c2b2fd17d96da946cbd76b927a1bad1649f465b698af5f76e87::fixed_point64::FixedPoint64"},{"name":"param_change_events","type":"0x1::event::EventHandle<0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba::weighted_pool::WeightedPoolParamChangeEvent>"}]}]}'
  );
}

export class stable_pool_scripts extends AptosBaseProcessor {
  constructor(options: AptosBindOptions) {
    super("stable_pool_scripts", options);
  }
  static DEFAULT_OPTIONS: AptosBindOptions = {
    address:
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba",
    network: AptosNetwork.TEST_NET,
  };

  static bind(options: Partial<AptosBindOptions> = {}): stable_pool_scripts {
    return new stable_pool_scripts({
      ...stable_pool_scripts.DEFAULT_OPTIONS,
      ...options,
    });
  }

  onEntryAddLiquidity(
    func: (
      call: stable_pool_scripts.AddLiquidityPayload,
      ctx: AptosContext
    ) => void,
    filter?: CallFilter,
    fetchConfig?: AptosFetchConfig
  ): stable_pool_scripts {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "stable_pool_scripts::add_liquidity",
      },
      fetchConfig
    );
    return this;
  }

  onEntryCreateStablePool(
    func: (
      call: stable_pool_scripts.CreateStablePoolPayload,
      ctx: AptosContext
    ) => void,
    filter?: CallFilter,
    fetchConfig?: AptosFetchConfig
  ): stable_pool_scripts {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "stable_pool_scripts::create_stable_pool",
      },
      fetchConfig
    );
    return this;
  }

  onEntryRemoveLiquidity(
    func: (
      call: stable_pool_scripts.RemoveLiquidityPayload,
      ctx: AptosContext
    ) => void,
    filter?: CallFilter,
    fetchConfig?: AptosFetchConfig
  ): stable_pool_scripts {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "stable_pool_scripts::remove_liquidity",
      },
      fetchConfig
    );
    return this;
  }

  onEntrySwap(
    func: (call: stable_pool_scripts.SwapPayload, ctx: AptosContext) => void,
    filter?: CallFilter,
    fetchConfig?: AptosFetchConfig
  ): stable_pool_scripts {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "stable_pool_scripts::swap",
      },
      fetchConfig
    );
    return this;
  }

  loadTypesInternal(registry: TypeRegistry) {
    loadAllTypes(registry);
  }
}

export namespace stable_pool_scripts {
  export interface AddLiquidityPayload<T0 = any, T1 = any, T2 = any, T3 = any>
    extends TypedEntryFunctionPayload<[bigint, bigint, bigint, bigint]> {
    arguments_typed: [bigint, bigint, bigint, bigint];
    type_arguments: [string, string, string, string];
  }

  export interface CreateStablePoolPayload<
    T0 = any,
    T1 = any,
    T2 = any,
    T3 = any
  > extends TypedEntryFunctionPayload<
      [bigint, bigint, bigint, bigint, bigint]
    > {
    arguments_typed: [bigint, bigint, bigint, bigint, bigint];
    type_arguments: [string, string, string, string];
  }

  export interface RemoveLiquidityPayload<
    T0 = any,
    T1 = any,
    T2 = any,
    T3 = any
  > extends TypedEntryFunctionPayload<[bigint]> {
    arguments_typed: [bigint];
    type_arguments: [string, string, string, string];
  }

  export interface SwapPayload<
    T0 = any,
    T1 = any,
    T2 = any,
    T3 = any,
    T4 = any,
    T5 = any
  > extends TypedEntryFunctionPayload<[bigint]> {
    arguments_typed: [bigint];
    type_arguments: [string, string, string, string, string, string];
  }

  export function loadTypes(_r: TypeRegistry) {
    loadAllTypes(_r);
  }
  export const ABI: MoveModule = JSON.parse(
    '{"address":"0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba","name":"stable_pool_scripts","friends":[],"exposed_functions":[{"name":"add_liquidity","visibility":"public","is_entry":true,"generic_type_params":[{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]}],"params":["&signer","u64","u64","u64","u64"],"return":[]},{"name":"create_stable_pool","visibility":"public","is_entry":true,"generic_type_params":[{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]}],"params":["&signer","u64","u64","u64","u64","u64"],"return":[]},{"name":"remove_liquidity","visibility":"public","is_entry":true,"generic_type_params":[{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]}],"params":["&signer","u64"],"return":[]},{"name":"swap","visibility":"public","is_entry":true,"generic_type_params":[{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]}],"params":["&signer","u64"],"return":[]}],"structs":[]}'
  );
}

export class weighted_pool_scripts extends AptosBaseProcessor {
  constructor(options: AptosBindOptions) {
    super("weighted_pool_scripts", options);
  }
  static DEFAULT_OPTIONS: AptosBindOptions = {
    address:
      "0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba",
    network: AptosNetwork.TEST_NET,
  };

  static bind(options: Partial<AptosBindOptions> = {}): weighted_pool_scripts {
    return new weighted_pool_scripts({
      ...weighted_pool_scripts.DEFAULT_OPTIONS,
      ...options,
    });
  }

  onEntryAddLiquidity(
    func: (
      call: weighted_pool_scripts.AddLiquidityPayload,
      ctx: AptosContext
    ) => void,
    filter?: CallFilter,
    fetchConfig?: AptosFetchConfig
  ): weighted_pool_scripts {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "weighted_pool_scripts::add_liquidity",
      },
      fetchConfig
    );
    return this;
  }

  onEntryCreateWeightedPool(
    func: (
      call: weighted_pool_scripts.CreateWeightedPoolPayload,
      ctx: AptosContext
    ) => void,
    filter?: CallFilter,
    fetchConfig?: AptosFetchConfig
  ): weighted_pool_scripts {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "weighted_pool_scripts::create_weighted_pool",
      },
      fetchConfig
    );
    return this;
  }

  onEntryRemoveLiquidity(
    func: (
      call: weighted_pool_scripts.RemoveLiquidityPayload,
      ctx: AptosContext
    ) => void,
    filter?: CallFilter,
    fetchConfig?: AptosFetchConfig
  ): weighted_pool_scripts {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "weighted_pool_scripts::remove_liquidity",
      },
      fetchConfig
    );
    return this;
  }

  onEntrySwapExactIn(
    func: (
      call: weighted_pool_scripts.SwapExactInPayload,
      ctx: AptosContext
    ) => void,
    filter?: CallFilter,
    fetchConfig?: AptosFetchConfig
  ): weighted_pool_scripts {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "weighted_pool_scripts::swap_exact_in",
      },
      fetchConfig
    );
    return this;
  }

  onEntrySwapExactOut(
    func: (
      call: weighted_pool_scripts.SwapExactOutPayload,
      ctx: AptosContext
    ) => void,
    filter?: CallFilter,
    fetchConfig?: AptosFetchConfig
  ): weighted_pool_scripts {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "weighted_pool_scripts::swap_exact_out",
      },
      fetchConfig
    );
    return this;
  }

  loadTypesInternal(registry: TypeRegistry) {
    loadAllTypes(registry);
  }
}

export namespace weighted_pool_scripts {
  export interface AddLiquidityPayload<
    T0 = any,
    T1 = any,
    T2 = any,
    T3 = any,
    T4 = any,
    T5 = any,
    T6 = any,
    T7 = any
  > extends TypedEntryFunctionPayload<[bigint, bigint, bigint, bigint]> {
    arguments_typed: [bigint, bigint, bigint, bigint];
    type_arguments: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ];
  }

  export interface CreateWeightedPoolPayload<
    T0 = any,
    T1 = any,
    T2 = any,
    T3 = any,
    T4 = any,
    T5 = any,
    T6 = any,
    T7 = any
  > extends TypedEntryFunctionPayload<[bigint, bigint, bigint, bigint]> {
    arguments_typed: [bigint, bigint, bigint, bigint];
    type_arguments: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ];
  }

  export interface RemoveLiquidityPayload<
    T0 = any,
    T1 = any,
    T2 = any,
    T3 = any,
    T4 = any,
    T5 = any,
    T6 = any,
    T7 = any
  > extends TypedEntryFunctionPayload<[bigint]> {
    arguments_typed: [bigint];
    type_arguments: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ];
  }

  export interface SwapExactInPayload<
    T0 = any,
    T1 = any,
    T2 = any,
    T3 = any,
    T4 = any,
    T5 = any,
    T6 = any,
    T7 = any,
    T8 = any,
    T9 = any
  > extends TypedEntryFunctionPayload<[bigint]> {
    arguments_typed: [bigint];
    type_arguments: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ];
  }

  export interface SwapExactOutPayload<
    T0 = any,
    T1 = any,
    T2 = any,
    T3 = any,
    T4 = any,
    T5 = any,
    T6 = any,
    T7 = any,
    T8 = any,
    T9 = any
  > extends TypedEntryFunctionPayload<[bigint, bigint]> {
    arguments_typed: [bigint, bigint];
    type_arguments: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ];
  }

  export function loadTypes(_r: TypeRegistry) {
    loadAllTypes(_r);
  }
  export const ABI: MoveModule = JSON.parse(
    '{"address":"0x9318e16d6d213c3aefcad039ab9fe018ac22ec12af338baf36b9abdda81cc5ba","name":"weighted_pool_scripts","friends":[],"exposed_functions":[{"name":"add_liquidity","visibility":"public","is_entry":true,"generic_type_params":[{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]}],"params":["&signer","u64","u64","u64","u64"],"return":[]},{"name":"create_weighted_pool","visibility":"public","is_entry":true,"generic_type_params":[{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]}],"params":["&signer","u64","u64","u64","u64"],"return":[]},{"name":"remove_liquidity","visibility":"public","is_entry":true,"generic_type_params":[{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]}],"params":["&signer","u64"],"return":[]},{"name":"swap_exact_in","visibility":"public","is_entry":true,"generic_type_params":[{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]}],"params":["&signer","u64"],"return":[]},{"name":"swap_exact_out","visibility":"public","is_entry":true,"generic_type_params":[{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]},{"constraints":[]}],"params":["&signer","u64","u64"],"return":[]}],"structs":[]}'
  );
}

export function loadAllTypes(_r: TypeRegistry) {
  _0x1.loadAllTypes(_r);
  _0x92285e3fb7903c2b2fd17d96da946cbd76b927a1bad1649f465b698af5f76e87.loadAllTypes(
    _r
  );
  _0x66c2cd54520b51294f62392203ed87de0e7c47b3650f5ed0fbe1578835275b8c.loadAllTypes(
    _r
  );
  _0x504b41d0fe4a9424ddc4ddd3517acbfc23f17805e2fb82d5caf8d9fcfeb28a02.loadAllTypes(
    _r
  );

  _r.load(fees.ABI);
  _r.load(init.ABI);
  _r.load(manager.ABI);
  _r.load(base_pool.ABI);
  _r.load(lp_account.ABI);
  _r.load(test_coins.ABI);
  _r.load(coin_helper.ABI);
  _r.load(stable_math.ABI);
  _r.load(stable_pool.ABI);
  _r.load(fees_scripts.ABI);
  _r.load(weighted_math.ABI);
  _r.load(weighted_pool.ABI);
  _r.load(stable_pool_scripts.ABI);
  _r.load(weighted_pool_scripts.ABI);
}
